{"version":3,"file":"sentry.interfaces.js","sourceRoot":"/","sources":["sentry.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { ModuleMetadata, Type } from \"@nestjs/common/interfaces\";\nimport { Integration, Options } from '@sentry/types';\nimport { ConsoleLoggerOptions, HttpException } from \"@nestjs/common\";\nimport { SeverityLevel } from \"@sentry/node\";\n\nexport interface SentryCloseOptions {\n    enabled: boolean;\n    // timeout â€“ Maximum time in ms the client should wait until closing forcefully\n    timeout?: number;\n}\n\nexport type SentryModuleOptions = Omit<Options, 'integrations'> & {\n    integrations?: Integration[];\n    close?: SentryCloseOptions;\n    prefix?: string;\n} & ConsoleLoggerOptions;\n\nexport interface SentryOptionsFactory {\n    createSentryModuleOptions(): Promise<SentryModuleOptions> | SentryModuleOptions;\n}\n\nexport interface SentryModuleAsyncOptions extends Pick<ModuleMetadata, 'imports'> {\n    inject?: any[];\n    useClass?: Type<SentryOptionsFactory>;\n    useExisting?: Type<SentryOptionsFactory>;\n    useFactory?: (...args: any[]) => Promise<SentryModuleOptions> | SentryModuleOptions;\n}\n\nexport type SentryTransaction = boolean | 'path' | 'methodPath' | 'handler';\n\nexport interface SentryFilterFunction {\n    (exception:any): boolean\n}\n\nexport interface SentryInterceptorOptionsFilter {\n    type: any;\n    filter?: SentryFilterFunction;\n}\n\nexport interface SentryInterceptorOptions {\n    filters?: SentryInterceptorOptionsFilter[];\n    tags?: { [key: string]: string };\n    extra?: { [key: string]: any };\n    fingerprint?: string[];\n    level?: SeverityLevel;\n\n    // https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L163\n    request?: boolean;\n    serverName?: boolean;\n    transaction?: boolean | 'path' | 'methodPath' | 'handler'; // https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L16\n    user?: boolean | string[];\n    version?: boolean;\n}"]}